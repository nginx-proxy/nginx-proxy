server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;
	return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {

{{ range $index, $value := $containers }}

	{{ $addrLen := len $value.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $value.Addresses 0 }}
		   # {{$value.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}

	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $value.Env.VIRTUAL_PORT }}
		{{ range $i, $address := $value.Addresses }}
		   {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
		   # {{$value.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
		{{ end }}

	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $i, $address := $value.Addresses }}
			{{ if eq $address.Port "80" }}
			# {{$value.Name}}
			server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
}

{{ range $index, $value := $containers }}
server {
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	server_name {{ $host }};
	proxy_buffering off;
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;

	location / {
		proxy_pass http://{{ $host }};
		include /etc/nginx/proxy_params;

		# HTTP 1.1 support
		proxy_http_version 1.1;

		{{/* Only add the websockets Upgrade headers if a WEBSOCKETS env var is set. */}}
                {{ if $value.Env.WEBSOCKETS }}
	                proxy_set_header Upgrade $http_upgrade;
	                proxy_set_header Connection "upgrade";
                {{ else }}
	                proxy_set_header Connection "";
                {{ end }}
                
	}
{{ end }}
}
{{ end }}
